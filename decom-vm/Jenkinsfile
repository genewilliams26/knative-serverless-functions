pipeline {
    agent none
    parameters {
        string(name: 'TOWER_PASSWORD', defaultValue: "na", description: "password for account used to access Tower API and must be url encoded")
        string(name: 'SCM_CREDENTIAL', defaultValue: "<User>_git", description: "The account used for SCM access in Tower")
        string(name: 'ORGANIZATION', defaultValue: "AdminOrg", description: "Owning Organization of Project")
        string(name: 'VMWARE_CREDENTIAL', defaultValue: "", description: "Credential Used for Infoblox Authentication")
        string(name: 'DEPLOYMENT_ENV', defaultValue: "dev", description: "Tower instance Environment to deploy to")
        string(name: 'TOWER_USER', defaultValue: "<User>", description: "Account used to communicate with Tower API")
    }

    stages {
        stage('Set Deployment Environment') {
            agent any
            steps {
                script {
                    if ("${params.DEPLOYMENT_ENV}" == "prodt") {
                        env.TOWER_INSTANCE = "besttower.aap"
                    } else if ("${params.DEPLOYMENT_ENV}" == "prodb") {
                        env.TOWER_INSTANCE = "besbtower.aap"
                    } else if ("${params.DEPLOYMENT_ENV}" == "test") {
                        env.TOWER_INSTANCE = "testtower.aap"
                    } else if ("${params.DEPLOYMENT_ENV}" == "dev") {
                        env.TOWER_INSTANCE = "devtower.aap"
                    }
                }
            }
        }
        stage('Get SCM Credential ID') {
            agent any
            steps {
                script {
                    env.SCM_CREDENTIAL_ID = sh (
                        script: """curl -H "Content-Type:application/json" -X GET -k https://${params.TOWER_USER}:${params.TOWER_PASSWORD}@${env.TOWER_INSTANCE}.<domain-name>/api/v2/credentials/?search=${params.SCM_CREDENTIAL}""",
                        returnStdout: true
                    ).trim().split(':')[5].split(",")[0]
                }
                sh """echo SCM CREDENTIAL ID ${env.SCM_CREDENTIAL_ID}"""
            }
        }

        stage('Get Organization') {
            agent any
            steps {
                script {
                    env.ORGANIZATION_ID = sh (
                        script: """curl -H "Content-Type:application/json" -X GET -k https://${params.TOWER_USER}:${params.TOWER_PASSWORD}@${env.TOWER_INSTANCE}.<domain-name>/api/v2/organizations/?search=${params.ORGANIZATION}""",
                        returnStdout: true
                    ).trim().split(':')[5].split(',')[0]
                }
                sh """echo ORGANIZATION ID is ${env.ORGANIZATION_ID}"""
            }
        }

        stage('Create Tower Project') {
            agent any
            steps {
                script {
                        script: """curl -X POST -d '{"allow_override": true, "name": "Deploy VMWare VM", "organization": ${env.ORGANIZATION_ID}, "scm_type": "git", "scm_url": "ssh://git@git.<domain-name>:7999/sd/decom-vm.git", "scm_branch": "master", "credential": ${env.SCM_CREDENTIAL_ID}, "scm_update_on_launch": true, "custom_virtualenv": "<Organization> Custom Image"}' -H "Content-Type:application/json" -k https://${params.TOWER_USER}:${params.TOWER_PASSWORD}@${env.TOWER_INSTANCE}.<domain-name>/api/v2/projects/""",
                        returnStdout: true
                    ).trim().split(',')[0].split(':')[1]
                }
            }
        }

        stage('Update Project') {
            agent any
            steps {
                sh """curl -X POST -k https://${params.TOWER_USER}:${params.TOWER_PASSWORD}@${env.TOWER_INSTANCE}.<domain-name>/api/v2/projects/${env.PROJECT_ID}/update/"""
            }
        }


        stage('Get Execution Environment ID') {
            agent any
            steps {
                script {
                    env.EXECUTION_ENV_ID = sh (
                        script: """curl -H "Content-Type:application/json" -X GET -k https://${params.TOWER_USER}:${params.TOWER_PASSWORD}@${env.TOWER_INSTANCE}.<domain-name>/api/v2/execution_environments/?search=Automation%20Hub%20Ansible%20Engine""",
                        returnStdout: true 
                    ).trim().split(',')[3].split(':')[2]
                }
                sh """echo EXECUTION ENVIRONMENT ID ${env.EXECUTION_ENV_ID}"""
            }
        }

        stage('Create Tower Template') {
            agent any
            steps {
                script {
                    env.TEMPLATE_ID = sh (
                        script: """curl -H "Content-Type:application/json" -X POST -k https://${params.TOWER_USER}:${params.TOWER_PASSWORD}@${env.TOWER_INSTANCE}.<domain-name>/api/v2/job_templates/ -d '{"name": "Deploy VMWare VM", "job_type": "run", "project": ${env.PROJECT_ID}, "playbook": "decom-vm.yml", "ask_inventory_on_launch": true, "ask_credential_on_launch": true, "ask_variables_on_launch": true, "execution_environment": ${env.EXECUTION_ENV_ID}}'""",
                        returnStdout: true
                    ).trim().split(',')[0].split(':')[1]
                }
                sh """echo TEMPLATE ID ${env.TEMPLATE_ID} created"""
            }
        }
    }
}
